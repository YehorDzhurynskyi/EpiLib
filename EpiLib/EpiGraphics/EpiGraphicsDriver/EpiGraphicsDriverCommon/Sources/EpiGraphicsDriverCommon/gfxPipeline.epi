class gfxPipelineViewport
{
    epiRect2f Rect;
    epiFloat MinDepth = 0.0f;
    epiFloat MaxDepth = 1.0f;
};

class gfxPipelineColorBlendAttachment
{
    epiBool BlendEnable;
    gfxBlendFactor SrcColorBlendFactor;
    gfxBlendFactor DstColorBlendFactor;
    gfxBlendOp ColorBlendOp;
    gfxBlendFactor SrcAlphaBlendFactor;
    gfxBlendFactor DstAlphaBlendFactor;
    gfxBlendOp AlphaBlendOp;
    gfxColorComponent ColorWriteMask = gfxColorComponent::RGBA;
};

class gfxPipelineVertexInputAttributeDescription
{
    epiU32 Location;
    gfxFormat Format;
    epiU32 Offset;
};

class gfxPipelineVertexInputBindingDescription
{
    epiU32 Stride;
    gfxPipelineVertexInputRate InputRate = gfxPipelineVertexInputRate::Vertex;

    [ReadOnly]
    {
        epiArray<gfxPipelineVertexInputAttributeDescription> AttributeDescriptions;
    }
};

class gfxPipelineGraphicsCreateInfo
{
    gfxShaderProgram ShaderProgram;

    epiU32 RenderSubPassIndex;

    gfxPipelineInputAssemblyType InputAssemblyType = gfxPipelineInputAssemblyType::None;

    [ReadOnly]
    {
        epiArray<gfxPipelineViewport> Viewports;
        epiArray<epiRect2s> Scissors;
        epiArray<gfxPipelineVertexInputBindingDescription> VertexInputBindingDescriptions;
    }

    epiBool DepthClampEnable = false;
    epiBool RasterizerDiscardEnable = false;
    gfxPolygonMode PolygonMode = gfxPolygonMode::Fill;
    epiFloat LineWidth = 1.0f;
    gfxCullMode CullMode = gfxCullMode::None;
    gfxFrontFace FrontFace = gfxFrontFace::CW;

    epiBool DepthBiasEnable = false;
    epiFloat DepthBiasConstantFactor = 0.0f;
    epiFloat DepthBiasClamp = 0.0f;
    epiFloat DepthBiasSlopeFactor = 0.0f;

    [ReadOnly]
    {
        epiArray<gfxPipelineColorBlendAttachment> ColorBlendAttachments;
    }

    epiBool ColorBlendLogicOpEnable;
    gfxLogicOp ColorBlendLogicOp;
    epiVec4f ColorBlendConstants;

    [ReadOnly]
    {
        epiArray<gfxPipelineDynamicState> DynamicStates;
    }
};

class gfxPipelineGraphics
{
    [Virtual, ReadOnly]
    {
        epiArray<gfxPipelineViewport> Viewports;
        epiArray<epiRect2s> Scissors;
    }
};
