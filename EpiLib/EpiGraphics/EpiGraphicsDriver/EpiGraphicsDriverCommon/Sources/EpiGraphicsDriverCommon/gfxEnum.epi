enum gfxTextureType
{
    Texture1D,
    Texture2D,
    Texture3D
};

enum gfxTextureViewType
{
    TextureView1D,
    TextureView2D,
    TextureView3D,
    TextureViewCube,
    TextureView1DArray,
    TextureView2DArray,
    TextureViewCubeArray
};

enum gfxVertexBufferUsage
{
    StaticRead,
    StaticDraw,
    DynamicRead,
    DynamicDraw,
    StreamRead,
    StreamDraw
};

enum gfxVertexBufferMapAccess
{
    Read,
    Write,
    ReadWrite
};

enum gfxPhysicalDeviceType
{
    None,
    IntegratedGPU,
    DiscreteGPU,
    VirtualGPU,
    CPU,
    Other
};

enum gfxPhysicalDeviceFeature
{
    RobustBufferAccess,
    FullDrawIndexUint32,
    ImageCubeArray,
    IndependentBlend,
    GeometryShader,
    TessellationShader,
    SampleRateShading,
    DualSrcBlend,
    LogicOp,
    MultiDrawIndirect,
    DrawIndirectFirstInstance,
    DepthClamp,
    DepthBiasClamp,
    FillModeNonSolid,
    DepthBounds,
    WideLines,
    LargePoints,
    AlphaToOne,
    MultiViewport,
    SamplerAnisotropy,
    TextureCompressionETC2,
    TextureCompressionASTC_LDR,
    TextureCompressionBC,
    OcclusionQueryPrecise,
    PipelineStatisticsQuery,
    VertexPipelineStoresAndAtomics,
    FragmentStoresAndAtomics,
    ShaderTessellationAndGeometryPointSize,
    ShaderImageGatherExtended,
    ShaderStorageImageExtendedFormats,
    ShaderStorageImageMultisample,
    ShaderStorageImageReadWithoutFormat,
    ShaderStorageImageWriteWithoutFormat,
    ShaderUniformBufferArrayDynamicIndexing,
    ShaderSampledImageArrayDynamicIndexing,
    ShaderStorageBufferArrayDynamicIndexing,
    ShaderStorageImageArrayDynamicIndexing,
    ShaderClipDistance,
    ShaderCullDistance,
    ShaderFloat64,
    ShaderInt64,
    ShaderInt16,
    ShaderResourceResidency,
    ShaderResourceMinLod,
    SparseBinding,
    SparseResidencyBuffer,
    SparseResidencyImage2D,
    SparseResidencyImage3D,
    SparseResidency2Samples,
    SparseResidency4Samples,
    SparseResidency8Samples,
    SparseResidency16Samples,
    SparseResidencyAliased,
    VariableMultisampleRate,
    InheritedQueries,
    StorageBuffer16BitAccess,
    UniformAndStorageBuffer16BitAccess,
    StoragePushConstant16,
    StorageInputOutput16,
    Multiview,
    MultiviewGeometryShader,
    MultiviewTessellationShader,
    VariablePointersStorageBuffer,
    VariablePointers,
    ProtectedMemory,
    SamplerYcbcrConversion,
    ShaderDrawParameters,
    SamplerMirrorClampToEdge,
    DrawIndirectCount,
    StorageBuffer8BitAccess,
    UniformAndStorageBuffer8BitAccess,
    StoragePushConstant8,
    ShaderBufferInt64Atomics,
    ShaderSharedInt64Atomics,
    ShaderFloat16,
    ShaderInt8,
    DescriptorIndexing,
    ShaderInputAttachmentArrayDynamicIndexing,
    ShaderUniformTexelBufferArrayDynamicIndexing,
    ShaderStorageTexelBufferArrayDynamicIndexing,
    ShaderUniformBufferArrayNonUniformIndexing,
    ShaderSampledImageArrayNonUniformIndexing,
    ShaderStorageBufferArrayNonUniformIndexing,
    ShaderStorageImageArrayNonUniformIndexing,
    ShaderInputAttachmentArrayNonUniformIndexing,
    ShaderUniformTexelBufferArrayNonUniformIndexing,
    ShaderStorageTexelBufferArrayNonUniformIndexing,
    DescriptorBindingUniformBufferUpdateAfterBind,
    DescriptorBindingSampledImageUpdateAfterBind,
    DescriptorBindingStorageImageUpdateAfterBind,
    DescriptorBindingStorageBufferUpdateAfterBind,
    DescriptorBindingUniformTexelBufferUpdateAfterBind,
    DescriptorBindingStorageTexelBufferUpdateAfterBind,
    DescriptorBindingUpdateUnusedWhilePending,
    DescriptorBindingPartiallyBound,
    DescriptorBindingVariableDescriptorCount,
    RuntimeDescriptorArray,
    SamplerFilterMinmax,
    ScalarBlockLayout,
    ImagelessFramebuffer,
    UniformBufferStandardLayout,
    ShaderSubgroupExtendedTypes,
    SeparateDepthStencilLayouts,
    HostQueryReset,
    TimelineSemaphore,
    BufferDeviceAddress,
    BufferDeviceAddressCaptureReplay,
    BufferDeviceAddressMultiDevice,
    VulkanMemoryModel,
    VulkanMemoryModelDeviceScope,
    VulkanMemoryModelAvailabilityVisibilityChains,
    ShaderOutputViewportIndex,
    ShaderOutputLayer,
    SubgroupBroadcastDynamicId,
    COUNT
};

enum gfxInstanceExtension
{
    Surface,
    SurfaceWin32,
    COUNT
};

enum gfxPhysicalDeviceExtension
{
    SwapChain,
    ImageLessFrameBuffer,
    ImageFormatList,
    COUNT
};

[FlagMask]
enum gfxQueueType
{
    Graphics,
    Compute,
    Transfer,
    SparseBinding,
    Protected,
    MAX,
    ALL = Graphics | Compute | Transfer | SparseBinding | Protected
};

enum gfxFormat
{
    UNDEFINED,
    R4G4_UNORM_PACK8,
    R4G4B4A4_UNORM_PACK16,
    B4G4R4A4_UNORM_PACK16,
    R5G6B5_UNORM_PACK16,
    B5G6R5_UNORM_PACK16,
    R5G5B5A1_UNORM_PACK16,
    B5G5R5A1_UNORM_PACK16,
    A1R5G5B5_UNORM_PACK16,
    R8_UNORM,
    R8_SNORM,
    R8_USCALED,
    R8_SSCALED,
    R8_UINT,
    R8_SINT,
    R8_SRGB,
    R8G8_UNORM,
    R8G8_SNORM,
    R8G8_USCALED,
    R8G8_SSCALED,
    R8G8_UINT,
    R8G8_SINT,
    R8G8_SRGB,
    R8G8B8_UNORM,
    R8G8B8_SNORM,
    R8G8B8_USCALED,
    R8G8B8_SSCALED,
    R8G8B8_UINT,
    R8G8B8_SINT,
    R8G8B8_SRGB,
    B8G8R8_UNORM,
    B8G8R8_SNORM,
    B8G8R8_USCALED,
    B8G8R8_SSCALED,
    B8G8R8_UINT,
    B8G8R8_SINT,
    B8G8R8_SRGB,
    R8G8B8A8_UNORM,
    R8G8B8A8_SNORM,
    R8G8B8A8_USCALED,
    R8G8B8A8_SSCALED,
    R8G8B8A8_UINT,
    R8G8B8A8_SINT,
    R8G8B8A8_SRGB,
    B8G8R8A8_UNORM,
    B8G8R8A8_SNORM,
    B8G8R8A8_USCALED,
    B8G8R8A8_SSCALED,
    B8G8R8A8_UINT,
    B8G8R8A8_SINT,
    B8G8R8A8_SRGB,
    A8B8G8R8_UNORM_PACK32,
    A8B8G8R8_SNORM_PACK32,
    A8B8G8R8_USCALED_PACK32,
    A8B8G8R8_SSCALED_PACK32,
    A8B8G8R8_UINT_PACK32,
    A8B8G8R8_SINT_PACK32,
    A8B8G8R8_SRGB_PACK32,
    A2R10G10B10_UNORM_PACK32,
    A2R10G10B10_SNORM_PACK32,
    A2R10G10B10_USCALED_PACK32,
    A2R10G10B10_SSCALED_PACK32,
    A2R10G10B10_UINT_PACK32,
    A2R10G10B10_SINT_PACK32,
    A2B10G10R10_UNORM_PACK32,
    A2B10G10R10_SNORM_PACK32,
    A2B10G10R10_USCALED_PACK32,
    A2B10G10R10_SSCALED_PACK32,
    A2B10G10R10_UINT_PACK32,
    A2B10G10R10_SINT_PACK32,
    R16_UNORM,
    R16_SNORM,
    R16_USCALED,
    R16_SSCALED,
    R16_UINT,
    R16_SINT,
    R16_SFLOAT,
    R16G16_UNORM,
    R16G16_SNORM,
    R16G16_USCALED,
    R16G16_SSCALED,
    R16G16_UINT,
    R16G16_SINT,
    R16G16_SFLOAT,
    R16G16B16_UNORM,
    R16G16B16_SNORM,
    R16G16B16_USCALED,
    R16G16B16_SSCALED,
    R16G16B16_UINT,
    R16G16B16_SINT,
    R16G16B16_SFLOAT,
    R16G16B16A16_UNORM,
    R16G16B16A16_SNORM,
    R16G16B16A16_USCALED,
    R16G16B16A16_SSCALED,
    R16G16B16A16_UINT,
    R16G16B16A16_SINT,
    R16G16B16A16_SFLOAT,
    R32_UINT,
    R32_SINT,
    R32_SFLOAT,
    R32G32_UINT,
    R32G32_SINT,
    R32G32_SFLOAT,
    R32G32B32_UINT,
    R32G32B32_SINT,
    R32G32B32_SFLOAT,
    R32G32B32A32_UINT,
    R32G32B32A32_SINT,
    R32G32B32A32_SFLOAT,
    R64_UINT,
    R64_SINT,
    R64_SFLOAT,
    R64G64_UINT,
    R64G64_SINT,
    R64G64_SFLOAT,
    R64G64B64_UINT,
    R64G64B64_SINT,
    R64G64B64_SFLOAT,
    R64G64B64A64_UINT,
    R64G64B64A64_SINT,
    R64G64B64A64_SFLOAT,
    B10G11R11_UFLOAT_PACK32,
    E5B9G9R9_UFLOAT_PACK32,
    D16_UNORM,
    X8_D24_UNORM_PACK32,
    D32_SFLOAT,
    S8_UINT,
    D16_UNORM_S8_UINT,
    D24_UNORM_S8_UINT,
    D32_SFLOAT_S8_UINT,
    BC1_RGB_UNORM_BLOCK,
    BC1_RGB_SRGB_BLOCK,
    BC1_RGBA_UNORM_BLOCK,
    BC1_RGBA_SRGB_BLOCK,
    BC2_UNORM_BLOCK,
    BC2_SRGB_BLOCK,
    BC3_UNORM_BLOCK,
    BC3_SRGB_BLOCK,
    BC4_UNORM_BLOCK,
    BC4_SNORM_BLOCK,
    BC5_UNORM_BLOCK,
    BC5_SNORM_BLOCK,
    BC6H_UFLOAT_BLOCK,
    BC6H_SFLOAT_BLOCK,
    BC7_UNORM_BLOCK,
    BC7_SRGB_BLOCK,
    ETC2_R8G8B8_UNORM_BLOCK,
    ETC2_R8G8B8_SRGB_BLOCK,
    ETC2_R8G8B8A1_UNORM_BLOCK,
    ETC2_R8G8B8A1_SRGB_BLOCK,
    ETC2_R8G8B8A8_UNORM_BLOCK,
    ETC2_R8G8B8A8_SRGB_BLOCK,
    EAC_R11_UNORM_BLOCK,
    EAC_R11_SNORM_BLOCK,
    EAC_R11G11_UNORM_BLOCK,
    EAC_R11G11_SNORM_BLOCK,
    ASTC_4x4_UNORM_BLOCK,
    ASTC_4x4_SRGB_BLOCK,
    ASTC_5x4_UNORM_BLOCK,
    ASTC_5x4_SRGB_BLOCK,
    ASTC_5x5_UNORM_BLOCK,
    ASTC_5x5_SRGB_BLOCK,
    ASTC_6x5_UNORM_BLOCK,
    ASTC_6x5_SRGB_BLOCK,
    ASTC_6x6_UNORM_BLOCK,
    ASTC_6x6_SRGB_BLOCK,
    ASTC_8x5_UNORM_BLOCK,
    ASTC_8x5_SRGB_BLOCK,
    ASTC_8x6_UNORM_BLOCK,
    ASTC_8x6_SRGB_BLOCK,
    ASTC_8x8_UNORM_BLOCK,
    ASTC_8x8_SRGB_BLOCK,
    ASTC_10x5_UNORM_BLOCK,
    ASTC_10x5_SRGB_BLOCK,
    ASTC_10x6_UNORM_BLOCK,
    ASTC_10x6_SRGB_BLOCK,
    ASTC_10x8_UNORM_BLOCK,
    ASTC_10x8_SRGB_BLOCK,
    ASTC_10x10_UNORM_BLOCK,
    ASTC_10x10_SRGB_BLOCK,
    ASTC_12x10_UNORM_BLOCK,
    ASTC_12x10_SRGB_BLOCK,
    ASTC_12x12_UNORM_BLOCK,
    ASTC_12x12_SRGB_BLOCK,
    G8B8G8R8_422_UNORM,
    B8G8R8G8_422_UNORM,
    G8_B8_R8_3PLANE_420_UNORM,
    G8_B8R8_2PLANE_420_UNORM,
    G8_B8_R8_3PLANE_422_UNORM,
    G8_B8R8_2PLANE_422_UNORM,
    G8_B8_R8_3PLANE_444_UNORM,
    R10X6_UNORM_PACK16,
    R10X6G10X6_UNORM_2PACK16,
    R10X6G10X6B10X6A10X6_UNORM_4PACK16,
    G10X6B10X6G10X6R10X6_422_UNORM_4PACK16,
    B10X6G10X6R10X6G10X6_422_UNORM_4PACK16,
    G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
    G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16,
    G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
    G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16,
    G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
    R12X4_UNORM_PACK16,
    R12X4G12X4_UNORM_2PACK16,
    R12X4G12X4B12X4A12X4_UNORM_4PACK16,
    G12X4B12X4G12X4R12X4_422_UNORM_4PACK16,
    B12X4G12X4R12X4G12X4_422_UNORM_4PACK16,
    G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
    G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16,
    G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
    G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16,
    G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
    G16B16G16R16_422_UNORM,
    B16G16R16G16_422_UNORM,
    G16_B16_R16_3PLANE_420_UNORM,
    G16_B16R16_2PLANE_420_UNORM,
    G16_B16_R16_3PLANE_422_UNORM,
    G16_B16R16_2PLANE_422_UNORM,
    G16_B16_R16_3PLANE_444_UNORM,
    PVRTC1_2BPP_UNORM_BLOCK_IMG,
    PVRTC1_4BPP_UNORM_BLOCK_IMG,
    PVRTC2_2BPP_UNORM_BLOCK_IMG,
    PVRTC2_4BPP_UNORM_BLOCK_IMG,
    PVRTC1_2BPP_SRGB_BLOCK_IMG,
    PVRTC1_4BPP_SRGB_BLOCK_IMG,
    PVRTC2_2BPP_SRGB_BLOCK_IMG,
    PVRTC2_4BPP_SRGB_BLOCK_IMG,
    ASTC_4x4_SFLOAT_BLOCK_EXT,
    ASTC_5x4_SFLOAT_BLOCK_EXT,
    ASTC_5x5_SFLOAT_BLOCK_EXT,
    ASTC_6x5_SFLOAT_BLOCK_EXT,
    ASTC_6x6_SFLOAT_BLOCK_EXT,
    ASTC_8x5_SFLOAT_BLOCK_EXT,
    ASTC_8x6_SFLOAT_BLOCK_EXT,
    ASTC_8x8_SFLOAT_BLOCK_EXT,
    ASTC_10x5_SFLOAT_BLOCK_EXT,
    ASTC_10x6_SFLOAT_BLOCK_EXT,
    ASTC_10x8_SFLOAT_BLOCK_EXT,
    ASTC_10x10_SFLOAT_BLOCK_EXT,
    ASTC_12x10_SFLOAT_BLOCK_EXT,
    ASTC_12x12_SFLOAT_BLOCK_EXT,
    A4R4G4B4_UNORM_PACK16_EXT,
    A4B4G4R4_UNORM_PACK16_EXT
};

[FlagMask]
enum gfxFormatFeatureMask
{
    SampledImage,
    StorageImage,
    StorageImageAtomic,
    UniformTexelBuffer,
    StorageTexelBuffer,
    StorageTexelBufferAtomic,
    VertexBuffer,
    ColorAttachment,
    ColorAttachmentBlend,
    DepthStencilAttachment,
    BlitSrc,
    BlitDst,
    SampledImageFilterLinear,
    TransferSrc,
    TransferDst,
    MidpointChromaSamples,
    SampledImageYCbCrConversionLinearFilter,
    SampledImageYCbCrConversionSeparateReconstructionFilter,
    SampledImageYCbCrConversionChromaReconstructionExplicit,
    SampledImageYCbCrConversionChromaReconstructionExplicitForceable,
    Disjoint,
    CositedChromaSamples,
    SampledImageFilterMinmax,
    SampledImageFilterCubic,
    AccelerationStructureVertexBuffer,
    FragmentDensityMap,
    FragmentShadingRateAttachment
};

enum gfxSurfaceColorSpace
{
    SRGB_NONLINEAR,
    DISPLAY_P3_NONLINEAR_EXT,
    EXTENDED_SRGB_LINEAR_EXT,
    DISPLAY_P3_LINEAR_EXT,
    DCI_P3_NONLINEAR_EXT,
    BT709_LINEAR_EXT,
    BT709_NONLINEAR_EXT,
    BT2020_LINEAR_EXT,
    HDR10_ST2084_EXT,
    DOLBYVISION_EXT,
    HDR10_HLG_EXT,
    ADOBERGB_LINEAR_EXT,
    ADOBERGB_NONLINEAR_EXT,
    PASS_THROUGH_EXT,
    EXTENDED_SRGB_NONLINEAR_EXT,
    DISPLAY_NATIVE_AMD
};

enum gfxSurfacePresentMode
{
    IMMEDIATE,
    MAILBOX,
    FIFO,
    FIFO_RELAXED,
    SHARED_DEMAND_REFRESH,
    SHARED_CONTINUOUS_REFRESH
};

[FlagMask]
enum gfxSurfaceTransformMask
{
    Identity,
    Rotate90,
    Rotate180,
    Rotate270,
    HorizontalMirror,
    HorizontalMirrorRotate90,
    HorizontalMirrorRotate180,
    HorizontalMirrorRotate270,
    Inherit
};

[FlagMask]
enum gfxCompositeAlphaMask
{
    Opaque,
    PreMultiplied,
    PostMultiplied,
    Inherit
};

[FlagMask]
enum gfxImageUsage
{
    TRANSFER_SRC,
    TRANSFER_DST,
    SAMPLED,
    STORAGE,
    COLOR_ATTACHMENT,
    DEPTH_STENCIL_ATTACHMENT,
    TRANSIENT_ATTACHMENT,
    INPUT_ATTACHMENT,
    SHADING_RATE_IMAGE,
    FRAGMENT_DENSITY_MAP
};

[FlagMask]
enum gfxImageAspect
{
    Color,
    Depth,
    Stencil,
    Metadata,
    Plane0,
    Plane1,
    Plane2,
    MemoryPlane0,
    MemoryPlane1,
    MemoryPlane2,
    MemoryPlane3
};

enum gfxPipelineInputAssemblyType
{
    None,
    PointList,
    LineList,
    LineStrip,
    TriangleList,
    TriangleStrip
};

enum gfxSampleCount
{
    Sample1,
    Sample2,
    Sample4,
    Sample8,
    Sample16,
    Sample32,
    Sample64
};

enum gfxAttachmentLoadOp
{
    Load,
    Clear,
    DontCare
};

enum gfxAttachmentStoreOp
{
    Store,
    DontCare
};

enum gfxImageLayout
{
    Undefined,
    General,
    ColorAttachmentOptimal,
    DepthStencilAttachmentOptimal,
    DepthStencilReadOnlyOptimal,
    ShaderReadOnlyOptimal,
    TransferSrcOptimal,
    TransferDstOptimal,
    Preinitialized,
    DepthReadOnlyStencilAttachmentOptimal,
    DepthAttachmentStencilReadOnlyOptimal,
    DepthAttachmentOptimal,
    DepthReadOnlyOptimal,
    StencilAttachmentOptimal,
    StencilReadOnlyOptimal,
    PresentSrc,
    SharedPresent,
    ShadingRateOptimal,
    FragmentDensityMapOptimal
};

enum gfxImageTiling
{
    Optimal,
    Linear
};

enum gfxPipelineBindPoint
{
    Graphics,
    Compute,
    RayTracing
};

enum gfxPolygonMode
{
    Fill,
    Line,
    Point
};

enum gfxCullMode
{
    None,
    Front,
    Back,
    FrontBack
};

enum gfxFrontFace
{
    CW,
    CCW
};

enum gfxBlendFactor
{
    Zero,
    One,
    SrcColor,
    OneMinusSrcColor,
    DstColor,
    OneMinusDstColor,
    SrcAlpha,
    OneMinusSrcAlpha,
    DstAlpha,
    OneMinusDstAlpha,
    ConstantColor,
    OneMinusConstantColor,
    ConstantAlpha,
    OneMinusConstantAlpha,
    SrcAlphaSaturate,
    Src1Color,
    OneMinusSrc1Color,
    Src1Alpha,
    OneMinusSrc1Alpha
};

enum gfxBlendOp
{
    Add,
    Subtract,
    ReverseSubtract,
    MIN, # TODO: make as Min/Max (conflicting with attribute)
    MAX,
    Zero,
    Src,
    Dst,
    SrcOver,
    DstOver,
    SrcIn,
    DstIn,
    SrcOut,
    DstOut,
    SrcAtop,
    DstAtop,
    Xor,
    Multiply,
    Screen,
    Overlay,
    Darken,
    Lighten,
    ColorDodge,
    ColorBurn,
    Hardlight,
    Softlight,
    Difference,
    Exclusion,
    Invert,
    InvertRGB,
    LinearDodge,
    LinearBurn,
    VividLight,
    LinearLight,
    PinLight,
    HardMix,
    HSL_HUE,
    HSL_Saturation,
    HSL_Color,
    HSL_Luminosity,
    Plus,
    PlusClamped,
    PlusClampedAlpha,
    PlusDarker,
    Minus,
    MinusClamped,
    Contrast,
    InvertOVG,
    Red,
    Green,
    Blue
};

[FlagMask]
enum gfxColorComponent
{
    R,
    G,
    B,
    A,
    RGB = R | G | B,
    RGBA = R | G | B | A
};

enum gfxLogicOp
{
    Clear,
    And,
    AndReverse,
    Copy,
    AndInverted,
    None,
    Xor,
    Or,
    Nor,
    Equivalent,
    Invert,
    OrReverse,
    CopyInverted,
    OrInverted,
    Nand,
    Set
};

enum gfxCompareOp
{
    Never,
    Less,
    Equal,
    LessOrEqual,
    Greater,
    NotEqual,
    GreaterOrEqual,
    Always
};

[FlagMask]
enum gfxPipelineStage
{
    TopOfPipe,
    DrawIndirect,
    VertexInput,
    VertexShader,
    TessellationControlShader,
    TessellationEvaluationShader,
    GeometryShader,
    FragmentShader,
    EarlyFragmentTests,
    LateFragmentTests,
    ColorAttachmentOutput,
    ComputeShader,
    Transfer,
    BottomOfPipe,
    Host,
    AllGraphics,
    AllCommands,
    TransformFeedback,
    ConditionalRendering,
    AccelerationStructureBuild,
    RayTracingShader,
    ShadingRateImage,
    TaskShader,
    MeshShader,
    FragmentDensityProcess,
    CommandPreprocess
};

[FlagMask]
enum gfxAccess
{
    IndirectCommandRead,
    IndexRead,
    VertexAttributeRead,
    UniformRead,
    InputAttachmentRead,
    ShaderRead,
    ShaderWrite,
    ColorAttachmentRead,
    ColorAttachmentWrite,
    DepthStencilAttachmentRead,
    DepthStencilAttachmentWrite,
    TransferRead,
    TransferWrite,
    HostRead,
    HostWrite,
    MemoryRead,
    MemoryWrite,
    TransformFeedbackWrite,
    TransformFeedbackCounterRead,
    TransformFeedbackCounterWrite,
    ConditionalRenderingRead,
    ColorAttachmentReadNonCoherent,
    AccelerationStructureRead,
    AccelerationStructureWrite,
    ShadingRateImageRead,
    FragmentDensityMapRead,
    CommandPreprocessRead,
    CommandPreprocessWrite
};

[FlagMask]
enum gfxDependency
{
    ByRegion,
    DeviceGroup,
    ViewLocal
};

enum gfxPipelineDynamicState
{
    Viewport,
    Scissor,
    LineWidth,
    DepthBias,
    BlendConstants,
    DepthBounds,
    StencilCompareMask,
    StencilWriteMask,
    StencilReference,
    ViewportWScaling,
    DiscardRectangle,
    SampleLocations,
    RayTracingPipelineStackSize,
    ViewportShadingRatePalette,
    ViewportCoarseSampleOrder,
    ExclusiveScissor,
    FragmentShadingRate,
    LineStipple,
    CullMode,
    FrontFace,
    PrimitiveTopology,
    ViewportWithCount,
    ScissorWithCount,
    VertexInputBindingStride,
    DepthTestEnable,
    DepthWriteEnable,
    DepthCompareOp,
    DepthBoundsTestEnable,
    StencilTestEnable,
    StencilOp,
    COUNT
};

enum gfxPipelineVertexInputRate
{
    Vertex,
    Instance
};

[FlagMask]
enum gfxBufferUsage
{
    TransferSrc,
    TransferDst,
    UniformTexelBuffer,
    StorageTexelBuffer,
    UniformBuffer,
    StorageBuffer,
    IndexBuffer,
    VertexBuffer,
    IndirectBuffer,
    ShaderDeviceAddress,
    TransformFeedbackBuffer,
    TransformFeedbackCounterBuffer,
    ConditionalRendering,
    AccelerationStructureBuildInputReadOnly,
    AccelerationStructureStorage,
    ShaderBindingTable
};

[FlagMask]
enum gfxDeviceMemoryProperty
{
    DeviceLocal,
    HostVisible,
    HostCoherent,
    HostCached,
    LazilyAllocated,
    Protected,
    DeviceCoherent,
    DeviceUncached
};

[FlagMask]
enum gfxCommandPoolUsage
{
    TRANSIENT, # TODO: keyword conflict Transient
    ResetCommandBuffer,
    Protected
};

[FlagMask]
enum gfxCommandBufferUsage
{
    OneTimeSubmit,
    RenderPassContinue,
    SimultaneousUse
};

enum gfxIndexBufferType
{
    UInt16,
    UInt32,
    None,
    UInt8
};

enum gfxDescriptorType
{
    None,
    Sampler,
    CombinedImageSampler,
    SampledImage,
    StorageImage,
    UniformTexelBuffer,
    StorageTexelBuffer,
    UniformBuffer,
    StorageBuffer,
    UniformBufferDynamic,
    StorageBufferDynamic,
    InputAttachment,
    InlineUniformBlock,
    AccelerationStructure,
    AccelerationStructureNV,
    MutableValve
};

[FlagMask]
enum gfxShaderStage
{
    Vertex,
    TessellationControl,
    TessellationEvaluation,
    Geometry,
    Fragment,
    Compute,
    AllGraphics = Vertex | TessellationControl | TessellationEvaluation | Geometry | Fragment,
    Raygen,
    AnyHit,
    ClosestHit,
    Miss,
    Intersection,
    Callable,
    Task,
    Mesh,
    All = Vertex | TessellationControl | TessellationEvaluation | Geometry | Fragment | Compute | Raygen | AnyHit | ClosestHit | Miss | Intersection | Callable | Task | Mesh
};

[FlagMask]
enum gfxDescriptorSetLayoutUsage
{
    UpdateAfterBindPool,
    PushDescriptor,
    HostOnlyPool
};

[FlagMask]
enum gfxDescriptorPoolUsage
{
    FreeDescriptorSet,
    UpdateAfterBind,
    HostOnly
};

[FlagMask]
enum gfxFenceCreateMask
{
    Signaled
};

[FlagMask]
enum gfxSemaphoreCreateMask
{
};

[FlagMask]
enum gfxSemaphoreWaitMask
{
    WaitAny
};

[FlagMask]
enum gfxSamplerCreateMask
{
    Subsampled,
    SubsampledCoarseReconstruction
};

enum gfxSamplerFilterMode
{
    Nearest,
    Linear,
    Cubic
};

enum gfxSamplerMipmapMode
{
    Nearest,
    Linear
};

enum gfxSamplerAddressMode
{
    Repeat,
    MirroredRepeat,
    ClampToEdge,
    ClampToBorder,
    MirroredClampToEdge
};

enum gfxSamplerBorderColor
{
    FloatTransparentBlack,
    IntTransparentBlack,
    FloatOpaqueBlack,
    IntOpaqueBlack,
    FloatOpaqueWhite,
    IntOpaqueWhite,
    FloatCustom,
    IntCustom
};

enum gfxComponentSwizzle
{
    Identity,
    Zero,
    One,
    R,
    G,
    B,
    A
};

enum gfxSharingMode
{
    Exclusive,
    Concurrent
};
