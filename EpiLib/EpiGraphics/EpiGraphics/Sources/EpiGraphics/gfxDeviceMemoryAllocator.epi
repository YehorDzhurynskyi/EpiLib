class gfxDeviceMemoryPoolCreateInfo
{
    gfxDeviceMemoryPoolCreateMask CreateMask;
    epiSize_t BlockSize;
    epiSize_t MinBlockCount;
    epiSize_t MaxBlockCount;
    epiU32 FrameInUseCount;
    epiFloat Priority;
    epiSize_t MinAllocationAlignment;
};

class gfxDeviceMemoryPool
{
};

class gfxDeviceMemoryAllocationCreateInfo
{
    gfxDeviceMemoryAllocationCreateMask CreateMask;
    gfxDeviceMemoryAllocationUsage Usage;

    gfxDeviceMemoryPropertyMask RequiredPropertiesMask;
    gfxDeviceMemoryPropertyMask PreferredPropertiesMask;

    gfxDeviceMemoryPool Pool;
    epiFloat Priority;
};

class gfxDeviceMemoryAllocation
{
    [Virtual, ReadOnly]
    {
        gfxDeviceMemoryAllocator Allocator;

        epiBool IsMapped;
        epiBool IsMappable;
    }
};

class gfxDeviceMemoryAllocationBuffer : gfxDeviceMemoryAllocation
{
    [ReadOnly]
    gfxBuffer Buffer;
};

class gfxDeviceMemoryAllocationImage : gfxDeviceMemoryAllocation
{
    [ReadOnly]
    gfxImage Image;
};

class gfxDeviceMemoryAllocatorBudget
{
    epiSize_t BlockBytes;
    epiSize_t AllocationBytes;
    epiSize_t UsageBytes;
    epiSize_t BudgetBytes;
};

class gfxDeviceMemoryAllocatorStatInfo
{
    epiU32 BlockCount;
    epiU32 AllocationCount;
    epiU32 UnusedRangeCount;
    epiSize_t UsedBytes;
    epiSize_t UnusedBytes;
    epiSize_t AllocationSizeMin;
    epiSize_t AllocationSizeAvg;
    epiSize_t AllocationSizeMax;
    epiSize_t UnusedRangeSizeMin;
    epiSize_t UnusedRangeSizeAvg;
    epiSize_t UnusedRangeSizeMax;
};

class gfxDeviceMemoryAllocatorStats
{
    epiArray<gfxDeviceMemoryAllocatorStatInfo> MemoryTypes;
    epiArray<gfxDeviceMemoryAllocatorStatInfo> MemoryHeaps;
    gfxDeviceMemoryAllocatorStatInfo Total;
};

class gfxDeviceMemoryAllocatorCreateInfo
{
    gfxDeviceMemoryAllocatorCreateMask CreateMask;
    epiSize_t PreferredLargeHeapBlockSize;
    epiU32 FrameInUseCount;
};

class gfxDeviceMemoryAllocator
{
    [Virtual]
    {
        [ReadOnly]
        gfxDevice Device;

        [WriteOnly]
        epiU32 CurrentFrameIndex;
    }
};
